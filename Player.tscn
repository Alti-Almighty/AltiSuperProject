[gd_scene load_steps=15 format=2]

[ext_resource path="res://code/MainCharMovement.gd" type="Script" id=1]
[ext_resource path="res://assets/textures/player/Vaccinated.png" type="Texture" id=2]
[ext_resource path="res://code/networking/PlayerReplication.gd" type="Script" id=3]
[ext_resource path="res://assets/textures/player/temp_projectile.png" type="Texture" id=4]
[ext_resource path="res://assets/textures/player/rage_screen.png" type="Texture" id=5]
[ext_resource path="res://code/RageTextureIgnoreRot.gd" type="Script" id=6]
[ext_resource path="res://PlayerCamera.gd" type="Script" id=7]

[sub_resource type="Shader" id=3]
code = "// HSV to RBG from https://www.rapidtables.com/convert/color/hsv-to-rgb.html
// Rotation matrix from https://en.wikipedia.org/wiki/Rotation_matrix

shader_type canvas_item;

const float PI = 3.1415926535;

uniform float strength: hint_range(0., 1.) = 0.5;
uniform float speed: hint_range(0., 10.) = 0.5;
uniform float angle: hint_range(0., 360.) = 0.;

void fragment() {
	float hue = UV.x * cos(radians(angle)) - UV.y * sin(radians(angle));
	hue = fract(hue + fract(TIME  * speed));
	float x = 1. - abs(mod(hue / (1./ 6.), 2.) - 1.);
	vec3 rainbow;
	if(hue < 1./6.){
		rainbow = vec3(1., x, 0.);
	} else if (hue < 1./3.) {
		rainbow = vec3(x, 1., 0);
	} else if (hue < 0.5) {
		rainbow = vec3(0, 1., x);
	} else if (hue < 2./3.) {
		rainbow = vec3(0., x, 1.);
	} else if (hue < 5./6.) {
		rainbow = vec3(x, 0., 1.);
	} else {
		rainbow = vec3(1., 0., x);
	}
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, vec4(rainbow, color.a), strength);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/strength = 0.339
shader_param/speed = 0.738
shader_param/angle = 42.857

[sub_resource type="Animation" id=5]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ) ]
}

[sub_resource type="Animation" id=6]
resource_name = "Waving"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.2, 1.2 ), Vector2( 1, 1 ) ]
}

[sub_resource type="CircleShape2D" id=1]
radius = 40.0

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;
uniform vec2 pivot = vec2(0.0);
uniform float amount = 0.0;
uniform int quality = 4;
uniform bool marginDebug = false;
const float ROOT_TWO = 1.41421356237;

void vertex(){
	vec2 vertex = TEXTURE_PIXEL_SIZE * VERTEX;
	vertex = vertex * (2.0 * length(pivot) + ROOT_TWO) + pivot;
	VERTEX = vertex / TEXTURE_PIXEL_SIZE;
VERTEX += pivot;
	UV = (UV - 0.5) * (2.0 * length(pivot) + ROOT_TWO) + pivot + 0.5;
}

float insideUnitSquare(vec2 v) {
    vec2 s = step(vec2(0.0), v) - step(vec2(1.0), v);
    return s.x * s.y;   
}

vec2 rotate(vec2 uv, vec2 p, float angle)
{
	mat2 rotation = mat2(vec2(cos(angle), -sin(angle)),
						vec2(sin(angle), cos(angle)));
	uv -= p;
	uv = uv * rotation;
	uv += p;
	return uv;
}

void fragment(){
	float inSquare = insideUnitSquare(UV);
	float numSamples = inSquare;
	COLOR = texture(TEXTURE, UV) * inSquare;
	float stepSize = amount/(float(quality));
	vec2 uv;
	for(int i = 1; i <= quality; i++){
		uv = rotate(UV, pivot + 0.5, float(i)*stepSize);
		inSquare = insideUnitSquare(uv);
		numSamples += inSquare;
		COLOR += texture(TEXTURE, uv) * inSquare;
		
		uv = rotate(UV, pivot + 0.5, -float(i)*stepSize);
		inSquare = insideUnitSquare(uv);
		numSamples += inSquare;
		COLOR += texture(TEXTURE, uv) * inSquare;
	}
	COLOR.rgb /= numSamples;
	COLOR.a /= float(quality)*2.0 + 1.0;
	if(marginDebug) COLOR += 0.1;
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/pivot = Vector2( 0, 0 )
shader_param/amount = 0.0
shader_param/quality = 4
shader_param/marginDebug = false

[node name="Player" type="Node2D"]
script = ExtResource( 3 )

[node name="RageTexture" type="TextureRect" parent="."]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -514.0
margin_top = -304.0
margin_right = 515.0
margin_bottom = 303.0
rect_pivot_offset = Vector2( 600, 300 )
texture = ExtResource( 5 )
expand = true
script = ExtResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="RageTexture"]
autoplay = "Waving"
anims/RESET = SubResource( 5 )
anims/Waving = SubResource( 6 )

[node name="KinematicBody2D" type="KinematicBody2D" parent="."]
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="KinematicBody2D"]
position = Vector2( 0, 1 )
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="KinematicBody2D"]
material = SubResource( 8 )
position = Vector2( -20, -5 )
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 2 )

[node name="Position2D" type="Position2D" parent="KinematicBody2D"]
position = Vector2( 43, 0 )

[node name="Sprite" type="Sprite" parent="KinematicBody2D/Position2D"]
visible = false
rotation = 1.5708
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 4 )

[node name="Camera2D" type="Camera2D" parent="KinematicBody2D"]
current = true
process_mode = 0
script = ExtResource( 7 )

[node name="Sound" type="Node" parent="."]

[node name="PlayerMixer" type="AudioStreamPlayer2D" parent="Sound"]

[node name="ShootingMixer" type="AudioStreamPlayer2D" parent="Sound"]
